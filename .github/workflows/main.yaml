# actions
name: "Build UI service"
on:
  push:
    branches:
      - main
  pull_request:
permissions:
      id-token: write # This is required for aws oidc connections (Try 4)
      contents: read # This is required for actions/checkout
      pull-requests: write # This is required for gh bot to comment PR
jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          role-session-name: ${{ secrets.AWS_OIDC_ROLE_SESSION_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}

      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v1

      # - name: Build ui registry
      #   uses: int128/create-ecr-repository-action@v1
      #   id: ecr
      #   with:
      #     repository: vendors_ui_container

      # - name: Build, tag, and push image to Amazon ECR
      #   id: build-image
      #   env:
      #     AWS_ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     AWS_IMAGE_TAG: ${{ github.sha }}
      #     AWS_ECR_URI: ${{ steps.ecr.outputs.repository-uri }}
      #   run: |
      #     docker build -t ${{ steps.ecr.outputs.repository-uri }}:$AWS_IMAGE_TAG .
      #     docker push ${{ steps.ecr.outputs.repository-uri }}:$AWS_IMAGE_TAG
      #     echo "::set-output name=image::${{ steps.ecr.outputs.repository-uri }}:$AWS_IMAGE_TAG"

      - name: Setup Terraform 
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.5
          working-directory: ./terraform

      - name: Terraform fmt
        id: fmt
        working-directory: ./terraform
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        working-directory: ./terraform
        env:
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
          AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY }}
        run: > 
          terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" 
          -backend-config="key=${AWS_BUCKET_KEY_NAME}" 
          -backend-config="region=${AWS_REGION}"

      # Code copied form https://github.com/marketplace/actions/hashicorp-setup-terraform
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ./terraform

      - name: Terraform Plan
        id: plan
        working-directory: ./terraform
        run: terraform plan -no-color
        if: github.event_name == 'pull_request'

      - name: Terraform Run
        id: run
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          working-directory: ./terraform
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
 
            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        id: status
        working-directory: ./terraform
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        working-directory: ./terraform
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
        env:
          TF_VAR_image_tag: ${{ github.sha }}
          TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
          TF_VAR_repo: https://github.com/FarrisIsmati/udemy-vendor-ui
          TF_VAR_PAT: ${{ secrets.PAT }}
          TF_VAR_GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
